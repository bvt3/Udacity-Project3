name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool: Prj3AgentPool

variables:
  python.version: '3.8'
  azureServiceConnectionId: 'ARM_service_conn'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'tf-vm'
  backendARMResourceGroupName: 'devops'
  backendARMStorageAccountName: 'udacity80st'
  backendARMContainerName: 'mycontainer'
  tfVersion: '1.5.4'
  webAppName: 'benPrj3-AppService'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '$(tfVersion)'
    
    # Run Terraform Init on the pipeline agent    
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(backendARMResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendARMStorageAccountName)'
        backendAzureRmContainerName: '$(backendARMContainerName)'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#    
    # Postman - Install Newman        
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    # Postman Data Validation Test Suite    
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Postman tests'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-seleniumtest

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests
#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    pool: Prj3AgentPool
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
              script: |
                wget "https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.tgz"
                tar -xf apache-jmeter-5.6.tgz
                unzip -o $(Build.BuildId)-perftests.zip
                ./apache-jmeter-5.6/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeterPerformanceTestSuite.log -f
                cat jmeterPerformanceTestSuite.log
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'

#--------------------------------------------#  
  # Selenium | Functional UI Tests
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment: '$(environmentName)'
    # environment:
    #   name: tf-vm
    #   resourceType: virtualMachine
    #   tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download Selenium artifact'
            artifact: drop-seleniumtest
            
          - task: Bash@3
            displayName: 'Execute Selenium tests'
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/devopsagent/app
                if [ -d "$DIR" ]; then
                    rm -r app/
                fi
                sudo rm -rf '/usr/local/bin/chromedriver' # reset chromedriver
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/devopsagent/mynewagent/_prj3work/1/drop-seleniumtest/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/devopsagent/app/chromedriver-linux64.zip
                if [ ! -f "$FILE" ]; then                    
                    wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/115.0.5790.170/linux64/chromedriver-linux64.zip
                    unzip -o chromedriver-linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/devopsagent/app
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log
                cat selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."

          # - task: ArchiveFiles@2
          #   displayName: 'Archive test log file'
          #   inputs:
          #     rootFolderOrFile: '/home/devopsagent/app/selenium.log'
          #     includeRootFolder: false
          #     archiveType: 'zip'
          #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitestlog.zip'
          
          # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitestlog.zip   # Same as the archiveFile artifact above. 
          #   displayName: 'Upload log package'
          #   artifact: drop-seleniumtestlog

          # - task: Bash@3
          #   displayName: 'Clean up working folder'
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       cd ~/
          #       DIR=/home/devopsagent/app
          #       if [ -d "$DIR" ]; then
          #           rm -r app/
          #       fi
          #       sudo rm -rf '/usr/local/bin/chromedriver'

#--------------------------------------------#  
# DESTROY STAGE
#--------------------------------------------#    
# - stage: Destroy
#   jobs:
#   - job: DestroyInfrastructure
#     steps:
#     # Install Terraform on the pipeline agent 
#     - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
#       displayName: 'Terrafom installation'
#       inputs:
#         terraformVersion: '$(tfVersion)'

#     # Run Terraform Init on the pipeline agent
#     - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
#       displayName: 'Terrafom init'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         backendServiceArm: '$(azureServiceConnectionId)'
#         backendAzureRmResourceGroupName: '$(backendARMResourceGroupName)'
#         backendAzureRmStorageAccountName: '$(backendARMStorageAccountName)'
#         backendAzureRmContainerName: '$(backendARMContainerName)'
#         backendAzureRmKey: 'test.terraform.tfstate'

#     # Destroy the resources in Azure by running a separate pipeline. 
#     - task: TerraformTaskV3@3
#       displayName: Terraform destroy
#       inputs:
#         provider: 'azurerm'
#         command: 'destroy'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         environmentServiceNameAzureRM: '$(azureServiceConnectionId)'