name: Azure Pipelines for Project3

trigger:
- main

pool: Prj3AgentPool

variables:
  python.version: '3.8'
  azureServiceConnectionId: 'ARM_service_conn'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'tf-vm'
  #resourceGroupName: 'UdacityProject3'
  backendARMResourceGroupName: 'devops'
  backendARMStorageAccountName: 'udacity80st'
  backendARMContainerName: 'mycontainer'
  tfVersion: '1.5.4'
  webAppName: 'benPrj3-AppService'

stages:
#--------------------------------------------#
# BUILD STAGE
#--------------------------------------------#
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: Build Infrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '$(tfVersion)'
    
    # Run Terraform Init on the pipeline agent    
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(backendARMResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendARMStorageAccountName)'
        backendAzureRmContainerName: '$(backendARMContainerName)'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above.
      displayName: 'Upload Package - Selenium zip'
      artifact: drop-seleniumtest

    #--------------------------------------------#
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package - FakeRestAPI zip'
      artifact: drop-fakerestapi

    #--------------------------------------------#
    # JMeter (Performance) Test Suite - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package - JMeter zip'
      artifact: drop-perftests
#--------------------------------------------#
# DEPLOYMENT STAGE
#--------------------------------------------#
- stage: Deploy
  jobs:
  #--------------------------------------------#
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    pool: Prj3AgentPool
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          #- task: AzureWebApp@1
          - task: AzureRMWebAppDeployment@4
            displayName: 'Deploy Azure Web App'
            inputs:
              ConnectionType: "AzureRM";
              azureSubscription: $(azureServiceConnectionId)
              #appName: $(webAppName)
              appType: webApp
              WebAppName : $(webAppName)
              #resourceGroupName: $(resourceGroupName)
              packageForLinux: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
              deploymentMethod: zipDeploy
              #package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

#--------------------------------------------#
# TEST STAGE
#--------------------------------------------#
- stage: Test
  jobs:    
    - deployment: TestRun
      displayName: Run Tests
      environment: '$(environmentName)'
      strategy:
        runOnce:
          deploy:
            steps:
            #--------------------------------------------#
            # Selenium | Functional UI Tests
            - download: current
              displayName: 'Download Selenium artifact'
              artifact: drop-seleniumtest
              
            - task: Bash@3
              displayName: 'Execute Selenium tests'
              inputs:
                targetType: 'inline'
                script: |           
                  #! /bin/bash
                  
                  sudo apt-get upgrade -y
                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  pip3 install selenium
                  cd ~/
                  DIR=/home/devopsagent/app
                  if [ -d "$DIR" ]; then
                      rm -r app/
                  fi
                  sudo rm -rf '/usr/local/bin/chromedriver' # reset chromedriver
                  if [ ! -d "$DIR" ]; then
                      mkdir app
                  fi
                  mv /home/devopsagent/mynewagent/_prj3work/1/drop-seleniumtest/$(Build.BuildId)-uitests.zip app
                  cd app
                  unzip -o $(Build.BuildId)-uitests.zip
                  FILE=/home/devopsagent/app/chromedriver-linux64.zip
                  if [ ! -f "$FILE" ]; then                    
                      wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/115.0.5790.170/linux64/chromedriver-linux64.zip
                      unzip -o chromedriver-linux64.zip
                      sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                  fi
                  export PATH=$PATH:/home/devopsagent/app
                  echo "Starting Selenium Tests"
                  python3 add_remove_from_cart.py >> selenium.log
                  cat selenium.log
                  echo "Completed Selenium Tests. Check selenium.log for results."            
            #--------------------------------------------#    
            # Postman - Install Newman
            - task: CmdLine@2
              displayName: Install Newman
              inputs:
                script: 'sudo npm install -g newman'
                workingDirectory: '$(System.DefaultWorkingDirectory)'
            # Postman Data Validation Test Suite
            - task: CmdLine@2
              displayName: Run Data Validation Tests
              continueOnError: true
              inputs:
                script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json -d activities.csv --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
                workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
            # Postman Regression Test Suite
            - task: CmdLine@2
              displayName: Run Regression Tests
              continueOnError: true
              inputs:
                script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
                workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
            # Postman - Publish Results
            - task: PublishTestResults@2
              inputs:
                testResultsFormat: 'JUnit'
                testResultsFiles: '**/TEST-*.xml'
                searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
                mergeTestResults: true
                testRunTitle: 'Postman tests'            
            #--------------------------------------------#
            # Run JMeter test suite against the App Service
            - task: CmdLine@2
              displayName: 'Run JMeter'
              inputs:
                script: |
                  wget "https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.tgz"
                  tar -xf apache-jmeter-5.6.tgz
                  unzip -o $(Build.BuildId)-perftests.zip
                  echo "RUN STRESS TEST"
                  ./apache-jmeter-5.6/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeterPerformanceTestSuite.log -f
                  cat jmeterPerformanceTestSuite.log
                  echo "RUN ENDURANCE TEST"
                  ./apache-jmeter-5.6/bin/jmeter -Jcsvfolder=$(System.DefaultWorkingDirectory)/automatedtesting/jmeter -n -t EnduranceTestSuite.jmx -j jmeterEnduranceTestSuite.log -f
                  cat jmeterEnduranceTestSuite.log
                workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'